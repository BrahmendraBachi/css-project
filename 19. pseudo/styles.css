@import url("https://fonts.googleapis.com/css2?family=Nunito&display=swap");

/* || RESET */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

img {
    display: block;
    max-width: 100%;
    height: auto;
}

/* || UTILITY CLASSES */
.nowrap {
    white-space: nowrap;
}

/* || GENERAL STYLES */
html {
    scroll-behavior: smooth;
}

body {
    font: 1.5rem "Nunito", sans-serif;
    min-height: 100vh;
    background-color: #475569;
    background-image: radial-gradient(whitesmoke, #475569);
    display: flex;
    flex-direction: column;
}

/* --> this works same as styling like 'header, footer, .card {}' */
/* --> In this case, we are specifying one or more selectors here */
/* --> specificity gonna be the highest among all three selectors (i.e., '.card' has the highest)*/
/* --> so, the entire selector has the same specificity */
/* :is(header, footer, .card) {
    position: sticky;
    background-color: #1e293b;
    color: whitesmoke;
    text-align: center;
} */

/* :where(header, footer, .card) will works same to ':is(header, footer, .card)' */
/* but, here specificy is always 0 (it will be always considered as lower specifcic) */
/* :where(header, footer, .card) {
    position: sticky;
    background-color: #1e293b;
    color: whitesmoke;
    text-align: center;
} */

/* --> ':is(header, footer, .card)' is active (i.e., not commented) then, if we make any changes won't reflect */
/* --> because, the entire ':is(header, footer, .card)' has more specificity than 'header, footer {}'*/
header,
footer {
    position: sticky;
    background-color: #1e293b;
    color: whitesmoke;
    text-align: center;
}

/* --> the 'target' pseudo class will selects last active element */
/* --> it takes 'id' selector to it's reference */
.card:target {
    border: 2px solid rebeccapurple;
}

header {
    top: 0;
}

nav {
    background-color: #fff;
    padding: 0.5rem;
    border-bottom: 2px solid #000;
    font-weight: bolder;
    display: flex;
    justify-content: space-evenly;
}

/* nav a,
nav a:visited {
    color: #000;
} */

/* we can write ":is()" pseudo-class which works in the same way as above */
nav :is(a:hover, a:visited) {
    color: #000;
}

nav a:hover,
nav a:focus {
    color: hsla(0, 0%, 20%, 0.6);
}

/* when we click on the link, it shows up this pseudo element ":active" */
nav a:active {
    color: red;
}

main {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 1rem;
}

footer {
    bottom: 0;
}

/* || PROFILE CARD */
.card {
    scroll-margin-top: 8rem;
    width: min(100%, 350px);
    background-color: #cbd5e1;
    border: 2px solid #000;
    border-radius: 15px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.card figure {
    display: flex;
    flex-flow: column nowrap;
}

.card img {
    border: 5px double #333;
    border-radius: 50%;
}

/* --> img[${attribute}] i.e., it checks for the presence of specified attribute in the 'img' tag */
/* --> it applies to all the 'img' tags which has 'alt' attribute */
.card img[alt] {
    border: 10px solid red;
}

/* --> ':not()' can be used */
/* --> it checks for the 'img' tag which has no 'alt' attribute */
.card img:not([alt]) {
    border: 10px solid yellow;
}

.card figcaption {
    font-weight: bolder;
    font-size: 2rem;
    margin: 1rem;
    text-align: center;
}

/* --> anything which is mentioned using '::' can be considered as pseudo elements */
.card figcaption::after {
    /* displays after the selector */
    content: ' hello';
}

.card figcaption::first-line {
    color: yellow;
}

.card p {
    position: relative;
}

.card figcaption::first-letter {
    color: sandybrown;
}

/* --> applying open quotation mark '"' */
.card p::before {
    content: open-quote;
    font-size: 3em;
    position: absolute;
    top: -0.25em;
    left: -0.5em;
}

.card p::after {
    /* --> applying open quotation mark '"' */
    content: close-quote;
    position: absolute;
    font-size: 3em;
    top: -0.25em;
    right: -0.5em;
}


/* || SMALL */
@media screen and (min-width: 576px) {
    main {
        justify-content: center;
        flex-flow: row wrap;
        padding: 1rem;
    }

    .card {
        width: min(100%, 400px);
    }

    .card:last-child {
        order: -1;
    }
}

/* || MEDIUM */
@media screen and (min-width: 768px) {
    nav {
        display: none;
    }

    .card {
        width: min(100%, 325px);
    }

    .card figure {
        flex-flow: column-reverse;
    }

    .card p {
        margin-top: 1rem;
    }
}

/* || LARGE */
@media screen and (min-width: 992px) {
    .card {
        width: min(100%, 400px);
    }

    .card:nth-child(2) {
        order: -1;
    }
}

/* || XL  */
@media screen and (min-width: 1200px) {
    .card {
        width: min(calc(33% - 1rem), 500px);
    }
}

/* || MOBILE DEVICE LANDSCAPE  */
@media screen and (max-height: 425px) and (min-aspect-ratio: 7/4) {
    h1 {
        font-size: 1.5rem;
    }

    nav {
        display: none;
    }

    main {
        flex-flow: row nowrap;
        justify-content: space-evenly;
        align-items: stretch;
    }

    .card {
        width: min(calc(33% - 0.25rem), 200px);
    }

    .card figcaption,
    .card p {
        font-size: 1.25rem;
    }
}