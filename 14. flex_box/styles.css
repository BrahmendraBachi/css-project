@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Roboto", sans-serif;
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 800px;
    min-height: 400px;
    margin-inline: auto;
    border: 1px solid #000;
    display: flex;

    /* --> 'justify-content' specifies the position of the items to start (ex: 'start', 'end', .. few other values  */
    justify-content: flex-start;
    /* justify-content: flex-end; */

    /* --> It starts filling items from the center*/
    justify-content: center;
    
    /* --> It aligns all the items to center */
    align-items: center;

    /* --> Specifies gap between two flex items*/
    gap: 1rem;

    /* --> It starts filling items from the start and takes all the space by giving equal gap between all the flex-items */
    /* justify-content: space-between; */

    /* --> It considers equal space around the one flex-item*/
    /* justify-content: space-around; */

    /* --> It is similar to space-around but it gives equal space at the edges as well*/
    /* justify-content: space-evenly; */

    
    /* --> By default by giving 'display: flex', it takes flex-direction as row */
    /* --> we need to specify it as column if we need it */
    
    /* --> and all the above properties works same as for this as well */
    /* flex-direction: column; */
    
    /* --> It used to reverse the display of flex-items for both columns and rows */
    /* flex-direction: row-reverse; */
    /* flex-direction: column-reverse; */

    /* --> This prop wraps the elements into next row when our flex-items are overflown (ex-scenario: if we reduce the screen-size) */
    /* flex-wrap: wrap; */

    /* --> 'flex-flow: ${flex-direction} ${flex-wrap}' */
    /* --> This prop can specify both 'flex-direction' and 'flex-wrap' prop */
    /* flex-flow: row wrap; */
    flex-flow: row nowrap;

    /* --> It aligns the entire content (but 'align-items' prop aligns individual flex-items) */
    /* --> We do have 'flex-start', 'flex-end', 'space-around', 'space-between', etc... values for this prop */
    align-content: space-evenly;
    /* align-content: flex-start; */

}

.box {
    /* min-width: 100px; */
    min-height: 100px;
    background-color: #000;
    color: #fff;
    font-size: 2rem;
    padding: 0.5rem;
    height: 100px;


    /* --> These three props are used to display the content in the center of the container */
    display: flex;
    justify-content: center;
    align-items: center;

    /* ==> For working, please comment block in html */
    
    /* --> please comment 'min-height: 100px' to enable this 'flex-basis' prop */
    /* --> flex-basis is similar to 'width' prop, but it won't be the same '100px' in all cases */
    flex-basis: 100px;
    /* --> this 'flex-grow: 1' grows the content equally between all flex-items to fill all the space  */
    /* --> if you increase the screen-size, these flex-items also grows equally */
    /* flex-grow: 1; */

    /* --> please enable 'flex-wrap: nowrap' in '.container' class and comment 'flex-grow' prop */
    flex-basis: 300px;
    /* --> this 'flex-shrink: 1' shrinks the content equally between all flex-items to fill all the space when we reduce the screen size */
    flex-shrink: 1;

    /* --> this prop specifies all the three props in this way '${flex-grow} ${flex-shrink} ${flex-basis}'*/
    /* flex: 1 1 250px; */
}

.box:nth-child(2) {
    /* --> this 'flex-grow: 2' doubles the content growth for the 2nd flex-item (in increasing screen size as well) */
    /* flex-grow: 2; */

    /* --> please enable 'flex-wrap: nowrap' in '.container' class and comment 'flex-grow' prop */
    /* --> this 'flex-shrink: 1' shrinks double for the 2nd flex-item (compared to other) */
    flex-shrink: 2;

    /* ==> Please uncomment the content in html */

    /* --> 'order' prop specifies the priority towards the end for the flex-item */
    /* --> initially all the flex-items has same 'order: 1', so it displays in order usually */
    /* --> setting this 'order: 2' for 2nd flex-item has more priority to display at the 'end', so it displays 'end' and rest remain same*/
    /* order: 2; */
    /* --> this displays at the 'first' */
    /* order: -1; */

    /* --> this 'prop' is used to align the specific flex-item */
    /* align-self: flex-end; */

}

